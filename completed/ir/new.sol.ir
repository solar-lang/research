

// it's okay to leave block instructions and nested expressions in.
// transforming them is rather easy

// How do we represent closures??
// How do we represent anonymous structs for closure environments?
// How do we reprenset writes and reads with pointers?
// How do we reprenset when clauses?

enum CFG {
    Expression(Expression)
    LetDeclaration {
        name: String,
        ty: TypeId,
        assign: Option<Expression>,
    },
    If {
        clauses: Vec<IfStatement>,
        else: Option<Branch>,
    }
    Loop(Vec<CFG>),
    Break,
    Next,
    Return(Option<Expression>),
}

struct IfStatement {
    condition: Expression,
    then: Branch,
}

enum Expression {
    FunctionCall {
        func: FuncId,
        args: Vec<Expression>,
    },
    BlockExpression(Vec<CFG>),
    // TODO how do we represent Consts?
    Const(Const),
}

enum Const {
    Bool(bool),
    U8(u8),
    U16(u16),
    U32(u32),
    U64(u64),
    F32(f32),
    F64(f64),
    String(String),
}

type Fieldname = String;

struct Struct {
    ty: TypeId,
    fields: Map<Fieldname, Expression>,
}

